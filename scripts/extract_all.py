#!/usr/bin/env python
import json
import logging
import os
import sys

import requests

from evoeng.packages_extract import PackagesFile

logger = logging.getLogger(__name__)


MANIFEST_URL = "http://content.warframe.com/MobileExport/Manifest/ExportManifest.json"


def get_texture_manifest() -> dict:
	print(f"Downloading {MANIFEST_URL}")
	manifest = requests.get(MANIFEST_URL).json().get("Manifest", [])
	return {o["uniqueName"]: o["textureLocation"].replace("\\", "/") for o in manifest}


class Extractor:
	def __init__(self, args):
		bin_path = args[0]

		self.texture_manifest = get_texture_manifest()

		with open(bin_path, "rb") as bin_file:
			print(f"Parsing {bin_path}")
			self.packages = PackagesFile(bin_file)

	def extract_for_filter(self, tag_filter: str) -> list:
		print(f"Extracting: {tag_filter!r}")
		manifest = self.packages["/Lotus/Types/Lore/PrimaryCodexManifest"]
		ret = []
		entries = manifest.get("Entries", []) + manifest.get("AutoGeneratedEntries", [])
		for entry in entries:
			if entry.get("tag", "") == tag_filter:
				key = entry["type"]
				package = self.packages[key]
				d = {"path": key, "data": package}
				if key in self.texture_manifest:
					d["texture"] = self.texture_manifest[key]
				ret.append(d)

		return ret

	def extract_all(self) -> dict:
		warframes = self.extract_for_filter("Warframe")
		mods = self.extract_for_filter("Mod")
		weapons = self.extract_for_filter("Weapon")
		return {"warframes": warframes, "mods": mods, "weapons": weapons}


def main() -> None:
	extractor = Extractor(sys.argv[1:])
	data = extractor.extract_all()
	with open(f"data.json", "w") as f:
		json.dump(data, f)


if __name__ == "__main__":
	main()
